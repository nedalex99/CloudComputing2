// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DateRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DateRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DateRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DateRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DateRequest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DateRequest_2eproto;
class DateRequest;
class DateRequestDefaultTypeInternal;
extern DateRequestDefaultTypeInternal _DateRequest_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DateRequest* Arena::CreateMaybeMessage<::DateRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class DateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DateRequest) */ {
 public:
  DateRequest();
  virtual ~DateRequest();

  DateRequest(const DateRequest& from);
  DateRequest(DateRequest&& from) noexcept
    : DateRequest() {
    *this = ::std::move(from);
  }

  inline DateRequest& operator=(const DateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DateRequest& operator=(DateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateRequest* internal_default_instance() {
    return reinterpret_cast<const DateRequest*>(
               &_DateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DateRequest& a, DateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DateRequest* New() const final {
    return CreateMaybeMessage<DateRequest>(nullptr);
  }

  DateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DateRequest& from);
  void MergeFrom(const DateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DateRequest_2eproto);
    return ::descriptor_table_DateRequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonthFieldNumber = 1,
    kDayFieldNumber = 2,
    kYeaarFieldNumber = 3,
  };
  // string month = 1;
  void clear_month();
  const std::string& month() const;
  void set_month(const std::string& value);
  void set_month(std::string&& value);
  void set_month(const char* value);
  void set_month(const char* value, size_t size);
  std::string* mutable_month();
  std::string* release_month();
  void set_allocated_month(std::string* month);
  private:
  const std::string& _internal_month() const;
  void _internal_set_month(const std::string& value);
  std::string* _internal_mutable_month();
  public:

  // string day = 2;
  void clear_day();
  const std::string& day() const;
  void set_day(const std::string& value);
  void set_day(std::string&& value);
  void set_day(const char* value);
  void set_day(const char* value, size_t size);
  std::string* mutable_day();
  std::string* release_day();
  void set_allocated_day(std::string* day);
  private:
  const std::string& _internal_day() const;
  void _internal_set_day(const std::string& value);
  std::string* _internal_mutable_day();
  public:

  // string yeaar = 3;
  void clear_yeaar();
  const std::string& yeaar() const;
  void set_yeaar(const std::string& value);
  void set_yeaar(std::string&& value);
  void set_yeaar(const char* value);
  void set_yeaar(const char* value, size_t size);
  std::string* mutable_yeaar();
  std::string* release_yeaar();
  void set_allocated_yeaar(std::string* yeaar);
  private:
  const std::string& _internal_yeaar() const;
  void _internal_set_yeaar(const std::string& value);
  std::string* _internal_mutable_yeaar();
  public:

  // @@protoc_insertion_point(class_scope:DateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr month_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr day_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr yeaar_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DateRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DateRequest

// string month = 1;
inline void DateRequest::clear_month() {
  month_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DateRequest::month() const {
  // @@protoc_insertion_point(field_get:DateRequest.month)
  return _internal_month();
}
inline void DateRequest::set_month(const std::string& value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:DateRequest.month)
}
inline std::string* DateRequest::mutable_month() {
  // @@protoc_insertion_point(field_mutable:DateRequest.month)
  return _internal_mutable_month();
}
inline const std::string& DateRequest::_internal_month() const {
  return month_.GetNoArena();
}
inline void DateRequest::_internal_set_month(const std::string& value) {
  
  month_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DateRequest::set_month(std::string&& value) {
  
  month_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DateRequest.month)
}
inline void DateRequest::set_month(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  month_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DateRequest.month)
}
inline void DateRequest::set_month(const char* value, size_t size) {
  
  month_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DateRequest.month)
}
inline std::string* DateRequest::_internal_mutable_month() {
  
  return month_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DateRequest::release_month() {
  // @@protoc_insertion_point(field_release:DateRequest.month)
  
  return month_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DateRequest::set_allocated_month(std::string* month) {
  if (month != nullptr) {
    
  } else {
    
  }
  month_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), month);
  // @@protoc_insertion_point(field_set_allocated:DateRequest.month)
}

// string day = 2;
inline void DateRequest::clear_day() {
  day_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DateRequest::day() const {
  // @@protoc_insertion_point(field_get:DateRequest.day)
  return _internal_day();
}
inline void DateRequest::set_day(const std::string& value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:DateRequest.day)
}
inline std::string* DateRequest::mutable_day() {
  // @@protoc_insertion_point(field_mutable:DateRequest.day)
  return _internal_mutable_day();
}
inline const std::string& DateRequest::_internal_day() const {
  return day_.GetNoArena();
}
inline void DateRequest::_internal_set_day(const std::string& value) {
  
  day_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DateRequest::set_day(std::string&& value) {
  
  day_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DateRequest.day)
}
inline void DateRequest::set_day(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  day_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DateRequest.day)
}
inline void DateRequest::set_day(const char* value, size_t size) {
  
  day_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DateRequest.day)
}
inline std::string* DateRequest::_internal_mutable_day() {
  
  return day_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DateRequest::release_day() {
  // @@protoc_insertion_point(field_release:DateRequest.day)
  
  return day_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DateRequest::set_allocated_day(std::string* day) {
  if (day != nullptr) {
    
  } else {
    
  }
  day_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), day);
  // @@protoc_insertion_point(field_set_allocated:DateRequest.day)
}

// string yeaar = 3;
inline void DateRequest::clear_yeaar() {
  yeaar_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DateRequest::yeaar() const {
  // @@protoc_insertion_point(field_get:DateRequest.yeaar)
  return _internal_yeaar();
}
inline void DateRequest::set_yeaar(const std::string& value) {
  _internal_set_yeaar(value);
  // @@protoc_insertion_point(field_set:DateRequest.yeaar)
}
inline std::string* DateRequest::mutable_yeaar() {
  // @@protoc_insertion_point(field_mutable:DateRequest.yeaar)
  return _internal_mutable_yeaar();
}
inline const std::string& DateRequest::_internal_yeaar() const {
  return yeaar_.GetNoArena();
}
inline void DateRequest::_internal_set_yeaar(const std::string& value) {
  
  yeaar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DateRequest::set_yeaar(std::string&& value) {
  
  yeaar_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DateRequest.yeaar)
}
inline void DateRequest::set_yeaar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  yeaar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DateRequest.yeaar)
}
inline void DateRequest::set_yeaar(const char* value, size_t size) {
  
  yeaar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DateRequest.yeaar)
}
inline std::string* DateRequest::_internal_mutable_yeaar() {
  
  return yeaar_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DateRequest::release_yeaar() {
  // @@protoc_insertion_point(field_release:DateRequest.yeaar)
  
  return yeaar_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DateRequest::set_allocated_yeaar(std::string* yeaar) {
  if (yeaar != nullptr) {
    
  } else {
    
  }
  yeaar_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), yeaar);
  // @@protoc_insertion_point(field_set_allocated:DateRequest.yeaar)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DateRequest_2eproto
